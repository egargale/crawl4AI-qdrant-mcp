# Python Programming Guide

Python is a high-level, interpreted programming language known for its simplicity and readability. It supports multiple programming paradigms including procedural, object-oriented, and functional programming.

## Getting Started with Python

To get started with Python, you need to install it on your system. Python can be downloaded from the official website python.org. Most modern operating systems come with Python pre-installed.

### Basic Syntax

Python uses indentation to define code blocks instead of curly braces or keywords. This makes the code more readable and enforces a consistent style.

```
# Hello World in Python
print("Hello, World!")

# Variables
name = "Alice"
age = 30

# Conditional statements
if age >= 18:
    print(f"{name} is an adult")
else:
    print(f"{name} is a minor")
```

## Data Structures

Python provides several built-in data structures:

1. Lists - Ordered, mutable collections
2. Tuples - Ordered, immutable collections
3. Dictionaries - Key-value pairs
4. Sets - Unordered collections of unique elements

### Working with Lists

Lists are one of the most commonly used data structures in Python:

```
# Creating a list
fruits = ["apple", "banana", "orange"]

# Adding elements
fruits.append("grape")
fruits.insert(1, "mango")

# Accessing elements
first_fruit = fruits[0]
last_fruit = fruits[-1]

# Iterating through a list
for fruit in fruits:
    print(fruit)
```

## Functions

Functions in Python are defined using the `def` keyword:

```
def greet(name, greeting="Hello"):
    return f"{greeting}, {name}!"

# Calling the function
message = greet("Alice")
print(message)  # Output: Hello, Alice!

message = greet("Bob", "Hi")
print(message)  # Output: Hi, Bob!
```

## Object-Oriented Programming

Python supports object-oriented programming with classes:

```
class Person:
    def __init__(self, name, age):
        self.name = name
        self.age = age
    
    def introduce(self):
        return f"Hi, I'm {self.name} and I'm {self.age} years old."

# Creating an instance
person = Person("Charlie", 25)
print(person.introduce())
```

## File Handling

Python provides simple methods for file handling:

```
# Writing to a file
with open("example.txt", "w") as file:
    file.write("This is some sample text.")

# Reading from a file
with open("example.txt", "r") as file:
    content = file.read()
    print(content)
```

## Error Handling

Python uses try-except blocks for error handling:

```
try:
    result = 10 / 0
except ZeroDivisionError:
    print("Cannot divide by zero!")
except Exception as e:
    print(f"An error occurred: {e}")
finally:
    print("This block always executes")
```

## Libraries and Packages

Python has a rich ecosystem of libraries and packages. Some popular ones include:

- NumPy: For numerical computing
- Pandas: For data manipulation and analysis
- Matplotlib: For data visualization
- Requests: For HTTP requests
- Flask/Django: For web development

You can install packages using pip:
```
pip install numpy pandas matplotlib
```

This guide covers the basics of Python programming. As you advance, you'll discover more features and libraries that make Python a powerful language for various applications including web development, data science, artificial intelligence, and automation.